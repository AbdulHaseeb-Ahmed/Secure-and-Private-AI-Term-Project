







"""
def exract_ten_classes( data, labels, no_instance=10 ):
    data_zeroes = data[ np.argwhere( labels == [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.] ).reshape( -1 ) ][ :no_instance ] # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 0
    data_ones = data[ np.argwhere( labels == [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.] ).reshape( -1 ) ][ :no_instance ] # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 1
    data_twos = data[ np.argwhere( labels == [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.] ).reshape( -1 ) ][ :no_instance ]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 2
    data_threes = data[np.argwhere( labels == [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.] ).reshape(-1)][ :no_instance]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 3
    data_fours = data[np.argwhere( labels == [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.] ).reshape(-1)][ :no_instance]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 4
    data_fives = data[np.argwhere( labels == [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.] ).reshape(-1)][ :no_instance]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 5
    data_sixes = data[np.argwhere( labels == [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.] ).reshape(-1)][ :no_instance]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 6
    data_sevens = data[np.argwhere( labels == [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.] ).reshape(-1)][ :no_instance]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 7
    data_eights = data[np.argwhere( labels == [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.] ).reshape(-1)][ :no_instance]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 8
    data_nines = data[np.argwhere( labels == [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.] ).reshape(-1)][ :no_instance]  # creates a (10,32,32) where there are 10 instances of 32 x 32 images that are of the class = 9
    x = np.vstack((data_zeroes, data_ones, data_twos, data_threes, data_fours, data_fives, data_sixes, data_sevens, data_eights, data_nines))  # stack data_zeros in first row and data_ones in second row

    labels_zeroes = np.full(data_zeroes.shape[0], 0)  # this artifically creates the labels for class 0 by figuring out how many zeroes are in the data
    labels_ones = np.full(data_ones.shape[0], 1)   # this artifically creates the labels for class 1 by figuring out how many ones are in the data
    labels_twos = np.full(data_twos.shape[0], 2)  # this artifically creates the labels for class 0 by figuring out how many twos are in the data
    labels_threes = np.full(data_threes.shape[0], 3)  # this artifically creates the labels for class 1 by figuring out how many threes are in the data
    labels_fours = np.full(data_fours.shape[0], 4)  # this artifically creates the labels for class 0 by figuring out how many fours are in the data
    labels_fives = np.full(data_fives.shape[0], 5)  # this artifically creates the labels for class 1 by figuring out how many fives are in the data
    labels_sixes = np.full(data_sixes.shape[0], 6)  # this artifically creates the labels for class 0 by figuring out how many sixes are in the data
    labels_sevens = np.full(data_sevens.shape[0], 7)  # this artifically creates the labels for class 1 by figuring out how many sevens are in the data
    labels_eights = np.full(data_eights.shape[0], 8)  # this artifically creates the labels for class 0 by figuring out how many eights are in the data
    labels_nines = np.full(data_nines.shape[0], 9)  # this artifically creates the labels for class 1 by figuring out how many nines are in the data
    y = np.concatenate((labels_zeroes, labels_ones, labels_twos, labels_threes, labels_fours, labels_fives, labels_sixes, labels_sevens, labels_eights, labels_nines))  # creates the y i.e. label matrix  for the x data

    return x, y

x_test_adv_pre, y_test_adv_pre = exract_ten_classes( x_test, y_test )
y_test_adv_pre = keras.utils.to_categorical( y_test_adv_pre, 10 )
print("x_test_adv_pre shape: " + str(x_test_adv_pre.shape) + "\n" + "x_test_adv_pre size: " + str(x_test_adv_pre.size) + "\n" +
      "y_test_adv_pre shape: " + str(y_test_adv_pre.shape) + "\n" + "y_test_adv_pre size: " + str(y_test_adv_pre.size) + "\n")
"""


"""
data_zeroes = np.empty((10,32,32,3))
    i = 0
    while (no_instance != 0):
        if np.argmax(labels[i]) == 0:
            data_zeroes = np.append(data_zeroes, [data[i]], axis=0)
            no_instance = no_instance - 1
        i = i + 1
    i = 0
    print(data_zeroes.shape)
    data_ones = np.empty((10, 32, 32, 3))
    while (no_instance != 0):
        if np.argmax(labels[i]) == 1:
            data_zeroes = np.append(data_ones, [data[i]], axis=0)
            no_instance = no_instance - 1
        i = i + 1
    x = np.vstack((data_zeroes, data_ones))  # stack data_zeros in first row and data_ones in second row

    labels_zeroes = np.zeros(data_zeroes.shape[0])  # this artifically creates the labels for class 0 by figuring out how many zeroes are in the data
    labels_ones = np.ones(data_ones.shape[0])  # this artifically creates the labels for class 1 by figuring out how many ones are in the data
    y = np.append(labels_zeroes, labels_ones)  # creates the y i.e. label matrix  for the x data
"""


for i in range(0,30):
    sample_pre = x_test_adv_pre[ i, :]
    print( sample_pre.shape )
    plt.imshow( sample_pre )
    plt.axis( 'off' )
    plt.show( )
    print("Label = " + str(np.argmax(y_test_adv[i])))


















from __future__ import absolute_import, division, print_function, unicode_literals
import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Activation, Dropout
import numpy as np
import matplotlib.pyplot as plt
from art.attacks import FastGradientMethod
from art.classifiers import KerasClassifier
from art.utils import load_dataset
import random



# Step 1: Load the CIFAR 10 dataset
(x_train, y_train), (x_test, y_test), min_, max_ = load_dataset(str("cifar10")) # Original Dataset
print("x_train shape: " + str(x_train.shape) + "\n" + "x_train size: " + str(x_train.size) + "\n" +
      "y_train shape: " + str(y_train.shape) + "\n" + "y_train size: " + str(y_train.size) + "\n" +
      "x_test shape: " + str(x_test.shape) + "\n" + "x_test size: " + str(x_test.size) + "\n" +
      "y_test shape: " + str(y_test.shape) + "\n" + "y_test size: " + str(y_test.size) + "\n")

    # Sampled dataset to train model
x_train, y_train = x_train[:5000], y_train[:5000] # take 5000 samples for the training set
x_test, y_test = x_test[:1000], y_test[:1000] # take 1000 samples for the testing set
print("x_train shape: " + str(x_train.shape) + "\n" + "x_train size: " + str(x_train.size) + "\n" +
      "y_train shape: " + str(y_train.shape) + "\n" + "y_train size: " + str(y_train.size) + "\n" +
      "x_test shape: " + str(x_test.shape) + "\n" + "x_test size: " + str(x_test.size) + "\n" +
      "y_test shape: " + str(y_test.shape) + "\n" + "y_test size: " + str(y_test.size) + "\n")



# Step 2: Create the model
model = Sequential()
model.add(Conv2D(32, (3, 3), padding="same", input_shape=x_train.shape[1:]))
model.add(Activation("relu"))
model.add(Conv2D(32, (3, 3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(Conv2D(64, (3, 3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(10))
model.add(Activation("softmax"))

model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])



# Step 3: Create ART classifier
classifier = KerasClassifier(model=model, clip_values=(min_, max_))
classifier.fit(x_train, y_train, nb_epochs=10, batch_size=128)



# Step 4: Evaluate the ART classifier on benign test examples
# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])

predictions = classifier.predict(x_test)
accuracy_benign = np.sum(np.argmax(predictions, axis=1) == np.argmax(y_test, axis=1)) / len(y_test)
print("Accuracy on benign test examples: {}%".format(accuracy_benign * 100))



# Step 5: Collect 10 instances of each case from test examples
def exract_ten_classes( data, labels, classes=(0,1,2,3,4,5,6,7,8,9), no_instance=10 ):
    x_pre = []
    y_pre = []
    for class_label in range(0, 10):
        index = random.randint(0, 500)
        iteration = no_instance
        while (iteration != 0):
            if np.argmax(labels[index]) == classes[class_label]:
                x_pre.append(data[index])
                y_pre.append(int(class_label))
                iteration = iteration - 1
            index = index + 1
    x = np.asarray(x_pre)
    y = np.asarray(y_pre)
    return x, y

x_test_adv_pre, y_test_adv = exract_ten_classes( x_test, y_test )
y_test_adv = keras.utils.to_categorical( y_test_adv, 10 )
print("x_test_adv_pre shape: " + str(x_test_adv_pre.shape) + "\n" + "x_test_adv_pre size: " + str(x_test_adv_pre.size) + "\n" +
      "y_test_adv_pre shape: " + str(y_test_adv.shape) + "\n" + "y_test_adv_pre size: " + str(y_test_adv.size) + "\n")

      # Step 6: Generate adversarial test examples and Evaluate the ART classifier on adversarial test examples
attack_eps_5 = FastGradientMethod(classifier=classifier, eps=0.05)
x_test_adv_eps_5 = attack_eps_5.generate(x=x_test_adv_pre)
predictions_eps_5 = classifier.predict(x_test_adv_eps_5)
accuracy_adv_eps_5 = np.sum(np.argmax(predictions_eps_5, axis=1) == np.argmax(y_test_adv, axis=1)) / len(y_test_adv)
print("Accuracy on adversarial test examples with eps = 0.05: {}%".format(accuracy_adv_eps_5 * 100))

attack_eps_10 = FastGradientMethod(classifier=classifier, eps=0.1)
x_test_adv_eps_10 = attack_eps_10.generate(x=x_test_adv_pre)
predictions_eps_10 = classifier.predict(x_test_adv_eps_10)
accuracy_adv_eps_10 = np.sum(np.argmax(predictions_eps_10, axis=1) == np.argmax(y_test_adv, axis=1)) / len(y_test_adv)
print("Accuracy on adversarial test examples with eps = 0.1: {}%".format(accuracy_adv_eps_10 * 100))

attack_eps_50 = FastGradientMethod(classifier=classifier, eps=0.5)
x_test_adv_eps_50 = attack_eps_50.generate(x=x_test_adv_pre)
predictions_eps_50 = classifier.predict(x_test_adv_eps_50)
accuracy_adv_eps_50 = np.sum(np.argmax(predictions_eps_50, axis=1) == np.argmax(y_test_adv, axis=1)) / len(y_test_adv)
print("Accuracy on adversarial test examples with eps = 0.5: {}%".format(accuracy_adv_eps_50 * 100))

attack_eps_95 = FastGradientMethod(classifier=classifier, eps=0.95)
x_test_adv_eps_95 = attack_eps_95.generate(x=x_test_adv_pre)
predictions_eps_95 = classifier.predict(x_test_adv_eps_95)
accuracy_adv_eps_95 = np.sum(np.argmax(predictions_eps_95, axis=1) == np.argmax(y_test_adv, axis=1)) / len(y_test_adv)
print("Accuracy on adversarial test examples with eps = 0.95: {}%".format(accuracy_adv_eps_95 * 100))


# Step 7: Plot Results
for ind in range(0, 100, 5):
    fig = plt.figure(figsize=(16, 16))
    fig.suptitle('Adversarial Attack On Victim Model', fontsize=24, fontweight='bold')
    columns = 5
    rows = 7
    ax = []


    ax.append(fig.add_subplot(rows, columns, 1))
    plt.text(0.38, 0.1, 'Original Image', fontsize=10, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 2))
    plt.text(0.0, 0.1, 'Adversarial Image EPS = 0.05', fontsize=10, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 3))
    plt.text(0.0, 0.1, 'Adversarial Image EPS = 0.1', fontsize=10, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 4))
    plt.text(0.0, 0.1, 'Adversarial Image EPS = 0.5', fontsize=10, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 5))
    plt.text(0.0, 0.1, 'Adversarial Image EPS = 0.95', fontsize=10, fontweight='bold')
    plt.axis('off')

    imageindex = ind
    for i in range(5, columns*rows - 6, 5):
        sample_pre = x_test_adv_pre[ imageindex, :]
        ax.append( fig.add_subplot(rows, columns, i + 1) )
        label_pre = np.argmax(classifier.predict(sample_pre.reshape((1, sample_pre.shape[0], sample_pre.shape[1], sample_pre.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_pre))
        plt.imshow(sample_pre)

        sample_post_eps_5 = x_test_adv_eps_5[ imageindex, :]
        ax.append( fig.add_subplot(rows, columns, i + 2) )
        label_post_eps_5 = np.argmax(classifier.predict(sample_post_eps_5.reshape((1, sample_post_eps_5.shape[0], sample_post_eps_5.shape[1], sample_post_eps_5.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_5))
        plt.imshow(sample_post_eps_5)

        sample_post_eps_10 = x_test_adv_eps_10[imageindex, :]
        ax.append(fig.add_subplot(rows, columns, i + 3))
        label_post_eps_10 = np.argmax(classifier.predict(sample_post_eps_10.reshape((1, sample_post_eps_10.shape[0], sample_post_eps_10.shape[1], sample_post_eps_10.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_10))
        plt.imshow(sample_post_eps_10)

        sample_post_eps_50 = x_test_adv_eps_50[imageindex, :]
        ax.append(fig.add_subplot(rows, columns, i + 4))
        label_post_eps_50 = np.argmax(classifier.predict(sample_post_eps_50.reshape((1, sample_post_eps_50.shape[0], sample_post_eps_50.shape[1], sample_post_eps_50.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_50))
        plt.imshow(sample_post_eps_50)

        sample_post_eps_95 = x_test_adv_eps_95[imageindex, :]
        ax.append(fig.add_subplot(rows, columns, i + 5))
        label_post_eps_95 = np.argmax(classifier.predict(sample_post_eps_95.reshape((1, sample_post_eps_95.shape[0], sample_post_eps_95.shape[1], sample_post_eps_95.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_95))
        plt.imshow(sample_post_eps_95)

        imageindex = imageindex + 1


    ax.append(fig.add_subplot(rows, columns, 31))
    plt.text(0.0, 0.5, "Accuracy on benign test examples: {}%".format(round(accuracy_benign * 100),2), fontsize=8, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 32))
    plt.text(0.0, 0.5, "Accuracy on test examples eps = 0.05: {}%".format(round(accuracy_adv_eps_5 * 100),2), fontsize=8, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 33))
    plt.text(0.0, 0.5, "Accuracy on test examples eps = 0.1: {}%".format(round(accuracy_adv_eps_10 * 100),2), fontsize=8, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 34))
    plt.text(0.0, 0.5, "Accuracy on test examples eps = 0.5: {}%".format(round(accuracy_adv_eps_50 * 100),2), fontsize=8, fontweight='bold')
    plt.axis('off')

    ax.append(fig.add_subplot(rows, columns, 35))
    plt.text(0.0, 0.5, "Accuracy on test examples eps = 0.95: {}%".format(round(accuracy_adv_eps_95 * 100),2), fontsize=8, fontweight='bold')
    plt.axis('off')

    fig.tight_layout(h_pad=4.0, w_pad=4.0)
    plt.show()

# Step 9: Data from Results
















# Step 6: Generate adversarial test examples and Evaluate the ART classifier on adversarial test examples
eps = [0.05, 0.1, 0.5, 0.95]
attack_data = {}
for i in range(0, 4):
    attack = FastGradientMethod(classifier=classifier, eps=eps[i])
    x_test_adv = attack.generate(x=x_test_adv_pre)
    predictions = classifier.predict(x_test_adv)
    accuracy_adv = np.sum(np.argmax(predictions, axis=1) == np.argmax(y_test_adv, axis=1)) / len(y_test_adv)
    print("Accuracy on adversarial test examples with eps = " + str(eps[i]) + ": {}%".format(accuracy_adv * 100))
    attack_data["EPS = " + str(eps[i])] = [x_test_adv, accuracy_adv]




# Step 7: Plot Results
for ind in range(0, 100, 5):
    fig = plt.figure(figsize=(16, 16))
    fig.suptitle('Adversarial Attack On Victim Model', fontsize=24, fontweight='bold')
    columns = 5
    rows = 7
    ax = []


    ax.append(fig.add_subplot(rows, columns, 1))
    plt.text(0.38, 0.1, 'Original Image', fontsize=10, fontweight='bold')
    plt.axis('off')

    for i in range(2, 6):
        ax.append(fig.add_subplot(rows, columns, i))
        plt.text(0.0, 0.1, 'Adversarial Image EPS = ' + str(eps[i-2]), fontsize=10, fontweight='bold')
        plt.axis('off')

    eps2 = ["EPS = 0.05", "EPS = 0.1", "EPS = 0.5", "EPS = 0.95"]
    imageindex = ind
    for i in range(5, columns*rows - 6, 5):
        sample_pre = x_test_adv_pre[ imageindex, :]
        ax.append( fig.add_subplot(rows, columns, i + 1) )
        label_pre = np.argmax(classifier.predict(sample_pre.reshape((1, sample_pre.shape[0], sample_pre.shape[1], sample_pre.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_pre))
        plt.imshow(sample_pre)

        sample_post_eps_5 = attack_data[eps2[0]][0][ imageindex, :]
        ax.append( fig.add_subplot(rows, columns, i + 2) )
        label_post_eps_5 = np.argmax(classifier.predict(sample_post_eps_5.reshape((1, sample_post_eps_5.shape[0], sample_post_eps_5.shape[1], sample_post_eps_5.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_5))
        plt.imshow(sample_post_eps_5)

        sample_post_eps_10 = attack_data[eps2[1]][0][imageindex, :]
        ax.append(fig.add_subplot(rows, columns, i + 3))
        label_post_eps_10 = np.argmax(classifier.predict(sample_post_eps_10.reshape((1, sample_post_eps_10.shape[0], sample_post_eps_10.shape[1], sample_post_eps_10.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_10))
        plt.imshow(sample_post_eps_10)

        sample_post_eps_50 = attack_data[eps2[2]][0][imageindex, :]
        ax.append(fig.add_subplot(rows, columns, i + 4))
        label_post_eps_50 = np.argmax(classifier.predict(sample_post_eps_50.reshape((1, sample_post_eps_50.shape[0], sample_post_eps_50.shape[1], sample_post_eps_50.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_50))
        plt.imshow(sample_post_eps_50)

        sample_post_eps_95 = attack_data[eps2[3]][0][imageindex, :]
        ax.append(fig.add_subplot(rows, columns, i + 5))
        label_post_eps_95 = np.argmax(classifier.predict(sample_post_eps_95.reshape((1, sample_post_eps_95.shape[0], sample_post_eps_95.shape[1], sample_post_eps_95.shape[2]))))
        plt.text(33, 18, 'Data:\nTrue Label = %d\nPredicted Label = %d' % (np.argmax(y_test_adv[imageindex]), label_post_eps_95))
        plt.imshow(sample_post_eps_95)

        imageindex = imageindex + 1


    ax.append(fig.add_subplot(rows, columns, 31))
    plt.text(0.0, 0.5, "Accuracy on benign test examples: {}%".format(round(accuracy_benign * 100),2), fontsize=8, fontweight='bold')
    plt.axis('off')

    for i in range(32, 36):
        ax.append(fig.add_subplot(rows, columns, i))
        plt.text(0.0, 0.5, "Accuracy on test examples eps = " + str(eps[i-32]) + ": {}%".format(round(attack_data[eps2[i-32]][1] * 100),2), fontsize=8, fontweight='bold')
        plt.axis('off')

    fig.tight_layout(h_pad=4.0, w_pad=4.0)
    plt.show()






















count = 0
for i in range(0,100):
    sample_post_eps_5 = x_test_adv_eps_5[ i, :]
    label_post_eps_5 = np.argmax(classifier.predict(sample_post_eps_5.reshape((1, sample_post_eps_5.shape[0], sample_post_eps_5.shape[1], sample_post_eps_5.shape[2]))))
    if (label_post_eps_5 == np.argmax(y_test_adv[i])):
        count = count + 1
print(count/100)

count = 0
for i in range(0,100):
    sample_post_eps_10 = x_test_adv_eps_10[ i, :]
    label_post_eps_10 = np.argmax(classifier.predict(sample_post_eps_10.reshape((1, sample_post_eps_10.shape[0], sample_post_eps_10.shape[1], sample_post_eps_10.shape[2]))))
    if (label_post_eps_10 == np.argmax(y_test_adv[i])):
        count = count + 1
print(count/100)

count = 0
for i in range(0,100):
    sample_post_eps_50 = x_test_adv_eps_50[ i, :]
    label_post_eps_50 = np.argmax(classifier.predict(sample_post_eps_50.reshape((1, sample_post_eps_50.shape[0], sample_post_eps_50.shape[1], sample_post_eps_50.shape[2]))))
    if (label_post_eps_50 == np.argmax(y_test_adv[i])):
        count = count + 1
print(count/100)

count = 0
for i in range(0,100):
    sample_post_eps_95 = x_test_adv_eps_95[ i, :]
    label_post_eps_95 = np.argmax(classifier.predict(sample_post_eps_95.reshape((1, sample_post_eps_95.shape[0], sample_post_eps_95.shape[1], sample_post_eps_95.shape[2]))))
    if (label_post_eps_95 == np.argmax(y_test_adv[i])):
        count = count + 1
print(count/100)
































count = [0, 0, 0, 0]
for i in range(0, 10):
    sample_post_eps_5 = x_test_adv_eps_5[ i, : ]
    label_post_eps_5 = np.argmax(classifier.predict(sample_post_eps_5.reshape((1, sample_post_eps_5.shape[0], sample_post_eps_5.shape[1], sample_post_eps_5.shape[2]))))
    sample_post_eps_10 = x_test_adv_eps_10[ i, : ]
    label_post_eps_10 = np.argmax(classifier.predict(sample_post_eps_10.reshape((1, sample_post_eps_10.shape[0], sample_post_eps_10.shape[1], sample_post_eps_10.shape[2]))))
    sample_post_eps_50 = x_test_adv_eps_50[ i, : ]
    label_post_eps_50 = np.argmax(classifier.predict(sample_post_eps_50.reshape((1, sample_post_eps_50.shape[0], sample_post_eps_50.shape[1], sample_post_eps_50.shape[2]))))
    sample_post_eps_95 = x_test_adv_eps_95[ i, : ]
    label_post_eps_95 = np.argmax(classifier.predict(sample_post_eps_95.reshape((1, sample_post_eps_95.shape[0], sample_post_eps_95.shape[1], sample_post_eps_95.shape[2]))))
    if (label_post_eps_5 == np.argmax(y_test_adv[i])):
        count[0] = count[0] + 1
    if (label_post_eps_10 == np.argmax(y_test_adv[i])):
        count[1] = count[1] + 1
    if (label_post_eps_50 == np.argmax(y_test_adv[i])):
        count[2] = count[2] + 1
    if (label_post_eps_95 == np.argmax(y_test_adv[i])):
        count[3] = count[3] + 1

print(count)


for i in range(0,10):
    sample_post_eps_5 = x_test_adv_eps_5[ i, :]
    print( sample_post_eps_5.shape )
    plt.imshow( sample_post_eps_5 )
    plt.axis( 'off' )
    plt.show( )
    label_post_eps_5 = np.argmax(classifier.predict(sample_post_eps_5.reshape((1, sample_post_eps_5.shape[0], sample_post_eps_5.shape[1], sample_post_eps_5.shape[2]))))
    print("Label = " + str(label_post_eps_5))
    print("Label = " + str(np.argmax(y_test_adv[i])))
